name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-cicd-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Test completed
      run: echo "‚úÖ Tests passed successfully!"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Build completed
      run: echo "‚úÖ Docker image built and pushed successfully!"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        kubectl config current-context

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Check deployment status
      run: |
        export KUBECONFIG=kubeconfig
        kubectl get pods -n devops-demo
        kubectl get services -n devops-demo
        echo "‚úÖ Deployment completed!"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Tests passed"
          echo "‚úÖ Docker image built and pushed"
          echo "‚úÖ Application deployed to Kubernetes"
        else
          echo "‚ùå Pipeline failed at: ${{ needs.deploy.result }}"
          exit 1
        fi