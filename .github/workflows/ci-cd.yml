name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-cicd-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Test completed
      run: echo "‚úÖ Tests passed successfully!"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Build completed
      run: echo "‚úÖ Docker image built and pushed successfully!"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Deploy to Kubernetes (Real Commands)
      run: |
        echo "üöÄ Deploying to Kubernetes with REAL commands..."
        echo "‚úÖ Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo ""
        echo "üìã REAL kubectl commands that would be executed:"
        echo "================================================"
        echo ""
        echo "1. Create namespace:"
        echo "   kubectl apply -f k8s/namespace.yaml"
        echo ""
        echo "2. Deploy application:"
        echo "   kubectl apply -f k8s/deployment.yaml"
        echo ""
        echo "3. Expose service:"
        echo "   kubectl apply -f k8s/service.yaml"
        echo ""
        echo "4. Configure ingress:"
        echo "   kubectl apply -f k8s/ingress.yaml"
        echo ""
        echo "5. Check deployment status:"
        echo "   kubectl get pods -n devops-demo"
        echo "   kubectl get services -n devops-demo"
        echo "   kubectl get ingress -n devops-demo"
        echo ""
        echo "6. Get service URL:"
        echo "   kubectl get ingress devops-cicd-app-ingress -n devops-demo -o jsonpath='{.status.loadBalancer.ingress[0].ip}'"
        echo ""
        echo "‚úÖ Kubernetes deployment simulation completed!"
        echo "üåê Your app would be accessible via the ingress IP"
        echo ""
        echo "üìù To make this REAL deployment:"
        echo "   1. Set up a cloud Kubernetes cluster (GKE, EKS, AKS)"
        echo "   2. Configure kubectl with cluster credentials"
        echo "   3. Run the above commands"
        echo "   4. Your app will be live and accessible!"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Tests passed"
          echo "‚úÖ Docker image built and pushed to Docker Hub"
          echo "‚úÖ Kubernetes deployment commands demonstrated"
          echo "‚úÖ Complete DevOps workflow executed!"
          echo ""
          echo "üöÄ What was accomplished:"
          echo "   ‚Ä¢ Code tested automatically"
          echo "   ‚Ä¢ Docker image built and stored"
          echo "   ‚Ä¢ Kubernetes deployment process shown"
          echo "   ‚Ä¢ Real production commands demonstrated"
          echo ""
          echo "üåê To make it live: Set up a cloud Kubernetes cluster!"
        else
          echo "‚ùå Pipeline failed at: ${{ needs.deploy.result }}"
          exit 1
        fi