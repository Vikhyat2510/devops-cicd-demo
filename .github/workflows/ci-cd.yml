name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/devops-cicd-app

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test

    - name: Test completed
      run: echo "✅ Tests passed successfully!"

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Build completed
      run: echo "✅ Docker image built and pushed successfully!"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      run: |
        # Create kubeconfig directory
        mkdir -p ~/.kube
        
        # Create kubeconfig file directly
        cat > ~/.kube/config << 'EOF'
        apiVersion: v1
        clusters:
        - cluster:
            certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lJTVFoMFFIWFlTNE13RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWdGdzB5TlRFd01UWXdNelV4TURGYUdBOHlNVEkxTURreU1qQXpOVFl3TVZvdwpGVEVUTUJFR0ExVUVBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDCkFRb0NnZ0VCQU5DS1BqZFh4a1ZwdmFEZ1lUcEY0VlNjQXZIcXU2RGRIVzk0WXpub0pHYlNONFVQdFduWk9zenAKNWpETTRiV1N0WHB4N3hHajU3WFdRNVBQS1BaZkM1bExRbnRPdkpENGxvYmoxeXFxMFQ1N0NrL3RRcCtpVzN2YwpoL3VZOVBPbkpyMUNVQUFPMXBsYUIxMDllZytqMW1QelRGbFJMOWtqcmJuOGZBWlh2WEYxSkpPMm9MQjhnV2MzCmF3ZjJydUYrd3JmbWhERlNlSGNvZEhpNU1oNWRaYVlCUlcvYlhrRk5zbjlsZ1JNNWlJSDRrY2xNZ1h3aGdjVkcKUytBYWtDU0toYkl3Q0lQNVJvcktXMVBaUVZOY0xNTDBwcU9maTZtdnZPMGNaSlgwcEc5RzlWaXkwV2NNdkpUUQphTFpUUXVsenRRNzZNNERpMmxPVi92S08xNWcydlJjQ0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZCL1NGelMvdnVKN1BRbEpoRnRkL3J4UGRFNHAKTUJVR0ExVWRFUVFPTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBTTlhbUVQCgpJay9RM1VwU0sxaFVuc0F3U1ZMd2lNbllETFZxTUtMd2pGTmpmMmhMNVVTMU1YbThMeTJ3cGNySUlITStUNjhXCmV6SlJiK3lVcnJ5dVl2TTBBcUZyejJyWWhWdHpHZW9aMVRPMGJSVmhtQ1hLNDhtdHhYZG5Vb1REYkE5bXB5U2gKRjFsT2RJZS9wRTFreUVqZUVVQVRpV2d4c3JGWkZxN0hUUjFjai9JOTBIcndxcGFxZzROWURSeXZWMTZzSGZtNQowaGxJdDFjM0JpSGdUNzYxcGZ3RGY5eXhJb0FxY3JlNkRDdzY2RysxOXRUS05mQnZXa1RFYVRhc3RFeXFOdFJOClhFeitERGZqWFlmTEZ5VjBreDgyNkk4WkdMVGJSZkZKbWc2blFoazFrZWx6Mm5CTjZ3ZXY2b0pIaGJBTHNSZU4KNFFRSzB6MDJRbUZCRkJZPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
            server: https://kubernetes.docker.internal:6443
          name: docker-desktop
        contexts:
        - context:
            cluster: docker-desktop
            user: docker-desktop
          name: docker-desktop
        current-context: docker-desktop
        kind: Config
        users:
        - name: docker-desktop
          user:
            client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRakNDQWlxZ0F3SUJBZ0lJSEZnSDMwVTlla2t3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TlRFd01UWXdNelV4TURGYUZ3MHlOakV3TVRZd016VXhNREZhTURZeApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sc3dHUVlEVlFRREV4SmtiMk5yWlhJdFptOXlMV1JsCmMydDBiM0F3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRQ3VRTjZ3dHhJSk0yNWcKQ1duOUswY2VPSEM5akE4YVdqYjFjQ0dRRjYxbi9MbmZweWZmckNBdjlYV2lvNFNUV2NqcFVlTmdBa2JWODZXVApPc2htQzlSUkJENTluQ3JKN1NMakU0czEvSURRUDFQK0tSVkZaZTZpMndKWUl3MzlDQnRBclU2blplRjdma2V3Ci9vQVQxM3FPc0dWRXY3MjFYaUlmSnUyODRuMUlBNnZXcE1raVcweXhNVndNbXo5RVJtaW9CQVI3M3pEWmVpdVoKQ0FZdC9UaVBzUHZTejd1cjJMMmlZYVB5ZEtOZFdFQmZubmNKV0pwWVVmNVlaK0NRS2tQZXVSSDl0Q1ZFU1l4YgpTU2lmalBoeGZ4Q1FuS3NXZ0Zaa2RocVVUQmh6OUlkc3dUSEZzemNOeEJUdVBBVTg5LzE3ZVVSbXB5cmViS0ZhCi8zWGllRk1mQWdNQkFBR2pkVEJ6TUE0R0ExVWREd0VCL3dRRUF3SUZvREFUQmdOVkhTVUVEREFLQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZCL1NGelMvdnVKN1BRbEpoRnRkL3J4UApkRTRwTUIwR0ExVWRFUVFXTUJTQ0VtUnZZMnRsY2kxbWIzSXRaR1Z6YTNSdmNEQU5CZ2txaGtpRzl3MEJBUXNGCkFBT0NBUUVBQVJjdUtaNDJyTHJSTzJCMWpGZ3hWQzR5a01ldlNKTndZbk9jcTd5enBFZUNpMFdkN0plbnpidWgKU1B2RmtXRUxWbGtQcG9SZG9rK1gyWkY3LzdsVmozTWI4Wmk5cndPSXJRWklXQ21ndGI4RU5IZnJmVVJUNGVCMwpYK3FzSzNQaWFzMVhmYlFVTUtRL3ZCZ3djTVU1OTd2NEJtYXZkdTNmdmVYY3EwZUx3elIyaWZ3U3UzQ25HNFhQCm5Ga3NSVmxjMGVVSGhqQmwvVVhCK004czJnSld3NkhJa3JkMVYrb1QxWjJwd2NwZndud212SHpOWmNhTVhvWmkKajVHSUpRTVNKbmIvbnJRck1JUkFNbW8vSDJZbzFiRjV1dzNzKzVFQktiR05qeis1Y2YyOElQM1lnWkpzOXREegp2U2JRcit6R0xPeERoa1dUb0xIZmtiemxXbEEveUE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
            client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmtEZXNMY1NDVE51WUFscC9TdEhIamh3dll3UEdsbzI5WEFoa0JldFoveTUzNmNuCjM2d2dML1Yxb3FPRWsxbkk2VkhqWUFKRzFmT2xrenJJWmd2VVVRUStmWndxeWUwaTR4T0xOZnlBMEQ5VC9pa1YKUldYdW90c0NXQ01OL1FnYlFLMU9wMlhoZTM1SHNQNkFFOWQ2anJCbFJMKzl0VjRpSHlidHZPSjlTQU9yMXFUSgpJbHRNc1RGY0RKcy9SRVpvcUFRRWU5OHcyWG9ybVFnR0xmMDRqN0Q3MHMrN3E5aTlvbUdqOG5TalhWaEFYNTUzCkNWaWFXRkgrV0dmZ2tDcEQzcmtSL2JRbFJFbU1XMGtvbjR6NGNYOFFrSnlyRm9CV1pIWWFsRXdZYy9TSGJNRXgKeGJNM0RjUVU3andGUFBmOWUzbEVacWNxM215aFd2OTE0bmhUSHdJREFRQUJBb0lCQUJKdFhMOWVWTU54VTJwSApoSlJYeDhrTDJleEppKzFTL2YzZGtrY05JZkxkdUlCTXlud3VWU2NOTTVmejU5aTNSWFpiQ1FzRm9wME1pNFZ5CjBXOXRMOUl6ZXpKSVdnUUpsa2RpTVRZUDBrVnpkUHZyTjBzaitPVHkrUi85OFFSQm43UXF2NmNYTUkyaE1JNm8Ka3ozRjZ6bDhzUERndi95V2pGQTBDeThPMm9YTFpPRi9USDJaUnVkallXUTZjWm1adjI3QUVkQS9UVEJwVUhBVQpMZ2xBQlRVdnJnQUhoSGIyRnVwYlpoVFhzazlTS2kyUDVRdTIybm8wc0Z0dGxkdjd0MW83eTFtTDJrM0Z1Q1BJCkhBS3IzUDZlcW5NTEtEa2Nvb29JOFN5bEdMb1lkUUdmc25FdGZqbXJzNlFEV0ZoSmNZMGtFMkpCeURzWFNKdzcKeDd3L2hua0NnWUVBeWk5L1pCSEwxTkZqYUtKcEtTNW5SNjBmNjF3eDluWTMxNHJreVlNRXlBWlhqeGl1SFFCRwplaEllT29NeHJQZHJrRVdpMVVWUytzNFVYYStDVzZ5Z0N4aytQUFcvbUw3dU82ZUpUNWxrbVA5VDQ4NHNFZWYzClVvQSt6RHlpaDJFQ3RpSVlSMDFjZTN0eXd5cm80U25XZXZxMlhiU28wQU91N3ZWQzNoeWpNR2NDZ1lFQTNLSWkKWW9CVFVIazhNM0Z4RGNFVjdPVzA5bklRSWVQTnhvZlRlN1NYUFFURGowWm5SRmEwTWprWW1sQTVKbGZlMnNaeAp6OFNuVk5sTS9kVDhBUHJtaVV4bzF4WkhvTjZHUzhvUnYxSzhOalNEVG9naEJoREphVXlIdG5NUGU5MUkvT1RuCjk0aEhyeGxQbHh0QnNXQjRBYWpWcFhmNTNndUpLZEZnNmRrdHRJa0NnWUErWFU1SEdMSXR6L1NBMXUvbkV2Z3EKaEwwK3hPNW9YbWkxSkpPVGtNVk55WjhDZFpOblFLbDhoOUFwTGtTSlhMd2lBVWpMemhsZFlXbW95RFZHZjhYUwpCcFJMQzJaeEFCdk43TXlPNy9xMnNyTTJwbWF6azBDWGd4VmJ2Q3hKNCtPSk9KVVNrVXRBajRDRHNOMnFibFJKCkZNSmh2eEwvTHRPcnc1MC9rOGZHYXdLQmdFcTVUdFAxaWtJVERXU080eTg1V2VlbDFLZ3k4V3ZJNzRSeHRCcU4KaXp0TFJjQmNvOVR0V0pJNTdDODNSR1BNRnRvWm82b3VmRTJzV3ZzTkMxeDVuV0thMGxjbVlKUUhTWXlabjNFZwo0RVdyZTEwNWxaV3NVY3FyOUxyQ05WaEtGZEl3NUs5ZEpJb1ZGSE9rODViVGlWRm1rUlU5a1E2MjhYbU1SRHB2Cko1K2hBb0dCQUlIZ2I1SFIxdWpka1RQbVAvdnlWbFpNc05KM205UjU5TTNGUlVLQms0WDNjZmdWSUFnNlBvMkwKZUpiQ01hUWZ5cDZHWWVPYWpmRjlzQXRrcjA4M1l6SHQ2V2p3NC9Da0JnbERabzRDVVJHRzFKS25HYURlUVZubApFU01sWmg2Qm5mbkhuSDMvOVBKWlhmclluZGtFeDlOQmJoYTVJSUUyU2JLdzgwWnRJRmRuCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
        EOF
        
        # Verify the config
        kubectl config current-context

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Check deployment status
      run: |
        kubectl get pods -n devops-demo
        kubectl get services -n devops-demo
        echo "✅ Deployment completed!"

  notify:
    needs: [test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 CI/CD Pipeline completed successfully!"
          echo "✅ Tests passed"
          echo "✅ Docker image built and pushed"
          echo "✅ Application deployed to Kubernetes"
        else
          echo "❌ Pipeline failed at: ${{ needs.deploy.result }}"
          exit 1
        fi